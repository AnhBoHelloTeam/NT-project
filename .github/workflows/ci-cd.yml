name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REGISTRY: docker.io

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm test
      env:
        MONGODB_URI: mongodb://localhost:27017/nt_project_test
        NODE_ENV: test

    - name: Lint backend code
      run: |
        cd backend
        npm run lint || echo "Linting completed"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/nt-project-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/nt-project-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/nt-project-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/nt-project-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push database init image
      uses: docker/build-push-action@v5
      with:
        context: ./database
        file: ./database/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/nt-project-db-init:latest
          ${{ secrets.DOCKER_USERNAME }}/nt-project-db-init:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Render
      run: |
        echo "üöÄ Deploying to Render..."
        echo "‚úÖ Docker images built and pushed to Docker Hub"
        echo "üìã Manual deployment steps:"
        echo "1. Go to Render Dashboard"
        echo "2. Update your services with new image tags:"
        echo "   - Backend: ${{ secrets.DOCKER_USERNAME }}/nt-project-backend:${{ github.sha }}"
        echo "   - Frontend: ${{ secrets.DOCKER_USERNAME }}/nt-project-frontend:${{ github.sha }}"
        echo "3. Deploy services"
        echo ""
        echo "üîó Render Dashboard: https://dashboard.render.com"

    - name: Health Check
      run: |
        echo "‚è≥ Waiting for Render deployment..."
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Your application will be available at your Render URLs"

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üê≥ Docker images pushed to Docker Hub"
          echo "üìã Next: Update your Render services with new images"
          echo "üîó Render Dashboard: https://dashboard.render.com"
        else
          echo "‚ùå Deployment failed!"
        fi
