version: '3.8'

services:
  # MongoDB Database (Atlas)
  # mongo:
  #   image: mongo:7.0
  #   container_name: nt-project-mongo
  #   environment:
  #     - MONGO_INITDB_DATABASE=nt_project
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongo_data:/data/db
  #     - ./database/init:/docker-entrypoint-initdb.d
  #   networks:
  #     - app-network
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    image: ${DOCKER_USERNAME:-nt-project}/backend:latest
    container_name: nt-project-backend
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb+srv://root:21082004@cluster0.oqhctgp.mongodb.net/nt_project?retryWrites=true&w=majority&appName=Cluster0
      - FRONTEND_URL=http://localhost:3001
    ports:
      - "3000:3000"
    # depends_on:
    #   mongo:
    #     condition: service_healthy
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    image: ${DOCKER_USERNAME:-nt-project}/frontend:latest
    container_name: nt-project-frontend
    ports:
      - "3001:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongo_data:

networks:
  app-network:
    driver: bridge
